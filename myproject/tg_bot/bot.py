from telegram.ext import Updater, CommandHandler
import os
from dotenv import load_dotenv
from services import get_filtered_warehouses
from telegram import ParseMode

ALLOWED_USERS = [1145370467]

# –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ .env
load_dotenv()
TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")

def restricted(func):
    def wrapper(update, context, *args, **kwargs):
        user_id = update.effective_user.id
        if user_id not in ALLOWED_USERS:
            update.message.reply_text("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
            return
        return func(update, context, *args, **kwargs)
    return wrapper


@restricted
def start(update, context):
    update.message.reply_text("üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ—Å—Ç–∞–≤–æ–∫ –Ω–∞ WB.\n\n–ù–∞–ø–∏—à–∏ /get_warehouses —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å–∫–ª–∞–¥–æ–≤.")


@restricted
def create_booking(update, context):
    try:
        warehouses, warehouse_map = get_filtered_warehouses()
        if not warehouses:
            update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å–∫–ª–∞–¥–æ–≤.")
            return

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        message = "üì¶ *–°–∫–ª–∞–¥—ã, –ø—Ä–∏–Ω–∏–º–∞—é—â–∏–µ ¬´–ö–æ—Ä–æ–±–∞¬ª*:\n\n"
        for warehouse in warehouses:
            message += f"‚Ä¢ {warehouse}\n"

        update.message.reply_text(message, parse_mode=ParseMode.MARKDOWN)

    except Exception as e:
        update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞: {e}")


def main():
    updater = Updater(TOKEN, use_context=True)
    dp = updater.dispatcher

    dp.add_handler(CommandHandler("start", start))
    dp.add_handler(CommandHandler("get_warehouses", create_booking))

    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω.")
    updater.start_polling()
    updater.idle()


if __name__ == "__main__":
    main()
